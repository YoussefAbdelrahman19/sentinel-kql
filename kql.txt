let lookback = 14d;
SecurityAlert
| where TimeGenerated > ago(lookback)
| where ProductName in~ ("Microsoft Defender for Endpoint","Microsoft Defender for Cloud","Microsoft Defender XDR")
| where AlertName has_cs "process injection" or tostring(ExtendedProperties.AlertType) =~ "SuspiciousProcessInjection"
| extend Host = tostring(parse_json(Entities)[0].HostName)
| summarize Alerts=count(), First=min(TimeGenerated), Last=max(TimeGenerated), Hosts=dcount(Host)
          by AlertName, ProductName
| order by Alerts desc
##
let lookback = 14d;
AlertInfo
| where TimeGenerated > ago(lookback)
| where ServiceSource in~ ("Microsoft Defender for Endpoint","Microsoft Defender XDR")
| where Title has_cs "Suspicious process injection"
| join kind=leftouter (AlertEvidence | project AlertId, DeviceName, FileName, FolderPath, SHA256=FileSha256, Signer, Issuer) on AlertId
| summarize Alerts=count(), Devices=dcount(DeviceName), First=min(TimeGenerated), Last=max(TimeGenerated)
          by Title, FileName, FolderPath, SHA256, tostring(Signer)
| order by Alerts desc
##
AlertInfo
| where Title has_cs "Suspicious process injection"
| join kind=leftouter AlertEvidence on AlertId
| summarize Devices=dcount(DeviceName), Alerts=count() by DeviceName, FileName, FolderPath, FileSha256
| order by Devices desc, Alerts desc
##
let lookback = 14d;
AlertInfo
| where TimeGenerated > ago(lookback)
| where Title has_cs "Suspicious process injection"
| join kind=leftouter AlertEvidence on AlertId
| summarize Devices=dcount(DeviceName), First=min(TimeGenerated), Last=max(TimeGenerated)
          by FileName, FolderPath, FileSha256, Signer
| extend Signed = iif(isnotempty(Signer), "Yes","No")
| order by Devices desc

##
let t = 2h;
let inj = AlertInfo
| where Title has_cs "Suspicious process injection"
| project InjTime=TimeGenerated, DeviceName, AlertId;
let hi = AlertInfo
| where Severity in~ ("High","Medium")
| project HiTime=TimeGenerated, DeviceName, HiTitle=Title, HiSeverity=Severity;
inj
| join kind=leftouter (hi) on DeviceName
| where isnull(HiTime) or abs(datetime_diff('minute', InjTime, HiTime)) > 120
| summarize BenignLike=count() by DeviceName
| order by BenignLike desc
##
let AllowedPaths = dynamic(["C:\\Program Files (x86)\\Vom...\\TimeShift\\","C:\\Program Files\\VMware\\","C:\\Program Files\\Citrix\\"]);
AlertInfo
| where Title has_cs "Suspicious process injection"
| join kind=leftouter AlertEvidence on AlertId
| where array_length(AllowedPaths) == 0 or any(AllowedPaths has_cs FolderPath)
| summarize count() by FileName, FolderPath, tostring(Signer)

####
// Prevalence & context check for one hash and device in last 14d
let h = "<SHA256_FROM_ALERT>";
let d = "<DeviceName_FROM_ALERT>";
let t = 14d;
let inj = AlertInfo
| where TimeGenerated > ago(t)
| where Title has_cs "Suspicious process injection"
| join kind=leftouter AlertEvidence on AlertId
| where FileSha256 == h;
let prev = inj | summarize Devices=dcount(DeviceName);
let hi = AlertInfo
| where TimeGenerated > ago(t)
| where DeviceName == d and Severity in~ ("High","Medium")
| project TimeGenerated, Title, Severity;
prev, hi
####

AlertInfo
| where TimeGenerated > ago(14d)
| where Title has_cs "Suspicious process injection observed"
| join kind=leftouter AlertEvidence on AlertId
| summarize Alerts=count(), Devices=dcount(DeviceName)
          by FileName, FolderPath, FileSha256, Signer

###

let lookback = 14d;
let inj = AlertInfo
| where TimeGenerated > ago(lookback)
| where Title has_cs "Suspicious process injection"
| join kind=leftouter AlertEvidence on AlertId;
inj
| summarize Devices=dcount(DeviceName), FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated)
          by FileSha256, FileName, FolderPath, Signer;

###
let t = 2h;
let injTimes = AlertInfo
| where Title has_cs "Suspicious process injection"
| project DeviceName, InjTime=TimeGenerated;
let hi = AlertInfo
| where Severity in~ ("High", "Medium")
| project DeviceName, HiTime=TimeGenerated, HiTitle=Title;
injTimes
| join kind=leftouter hi on DeviceName
| where isnull(HiTime) or abs(datetime_diff('minute', InjTime, HiTime)) > 120
| summarize BenignLike=count() by DeviceName;
###
let lookback = 14d;
AlertInfo
| where TimeGenerated > ago(lookback)
| where ServiceSource in~ ("Microsoft Defender for Endpoint","Microsoft Defender XDR")
| where Title has_cs "Suspicious process injection"
| join kind=leftouter (AlertEvidence
    | project AlertId, DeviceName, FileName, FolderPath, FileSha256, Signer) on AlertId
| summarize Alerts=count(), Devices=dcount(DeviceName), First=min(TimeGenerated), Last=max(TimeGenerated)
          by Title, FileName, FolderPath, FileSha256, tostring(Signer)
| order by Alerts desc
###

let t = 2h;
let inj = AlertInfo
| where Title has_cs "Suspicious process injection"
| project InjTime=TimeGenerated, DeviceName, AlertId;
let hi = AlertInfo
| where Severity in ("High","Medium")
| project HiTime=TimeGenerated, DeviceName, HiTitle=Title, HiSeverity=Severity;
inj
| join kind=leftouter hi on DeviceName
| where isnull(HiTime) or abs(datetime_diff("minute", InjTime, HiTime)) > 120
| summarize BenignLike=count() by DeviceName
| order by BenignLike desc
###
let lookback = 30d;
AlertInfo
| where TimeGenerated > ago(lookback)
| where Title has_cs "Suspicious process injection"
| join kind=leftouter AlertEvidence on AlertId
| summarize Devices=dcount(DeviceName), Alerts=count() by FileSha256, FileName, FolderPath, tostring(Signer)
| order by Devices desc, Alerts desc

##

let lookback = 14d;
SecurityAlert
| where TimeGenerated > ago(lookback)
| where ProductName in~ ("Microsoft Defender for Endpoint","Microsoft Defender for Cloud","Microsoft Defender XDR")
| where AlertName has_cs "process injection"
| summarize Alerts=count(), First=min(TimeGenerated), Last=max(TimeGenerated) by AlertName, ProductName
| order by Alerts desc
##
let start = datetime(2025-01-01);
let end   = datetime(2025-10-01);
AlertInfo
| where TimeGenerated between (start .. end)
| where ServiceSource in ("Microsoft Defender for Endpoint","Microsoft Defender XDR")
| where Title has_cs "Suspicious process injection"
| summarize by AlertId
##
####################################
Logic App Design – BulkClose-ProcInjection-Backlog (one-time run)

Trigger
- Manual (HTTP request) or Recurrence (Run once).

Actions
1) Initialize variables: counters (Closed/Skipped/Failed), beforeDate (e.g., 2025-10-01T00:00:00Z).
2) HTTP (Managed Identity) – GET incidents (top=200) with OData filter:
   properties/title contains 'Suspicious process injection' and properties/createdTimeUtc lt <beforeDate>
3) Until loop (while nextLink exists):
   - Parse response.value array → For each incident:
     * If properties.status == 'Closed' → increment Skipped.
     * Else HTTP PATCH (Managed Identity) to set:
       status=Closed, classification=BenignPositive,
       classificationComment='Auto-closed backlog as Benign/Expected (proc injection) – PI-BENIGN-V1',
       labels: auto-closed, proc-injection, backlog-2025Q4.
     * Increment counters and Apply delay every N items (e.g., 3s per 200).
   - If nextLink present → HTTP GET nextLink and continue.
4) Compose a summary and send Teams/Email notification to SOC.
5) Optional: Append results to a storage table or Log Analytics custom log for audit.

Permissions
- System-assigned Managed Identity with “Microsoft Sentinel Responder” (or Contributor) on the workspace.

Safety Switches (optional before PATCH)
- KQL to rule out devices with High/Medium alerts ±2h.
- Only close Informational/Low severity (if your policy requires).

Outcome
- Historical incidents closed with consistent classification & comments.
- No changes to new incidents behavior unless you add a separate Automation Rule for new ones.########################


// KQL_Backlog_Targeting.kql
// Find candidate AlertIds and their Incidents time ranges for backlog closure
let start = datetime(2024-01-01);
let end   = datetime(2025-10-01);
// Defender XDR streams
AlertInfo
| where TimeGenerated between (start .. end)
| where ServiceSource in ("Microsoft Defender for Endpoint","Microsoft Defender XDR")
| where Title has_cs "Suspicious process injection"
| summarize by AlertId
##############
// ============================================
// Phase 1: Initial Alert Analysis
// ============================================

// Query 1: Get all VirtualTimeService related alerts
// Purpose: فهم كل الـ alerts اللي حصلت
// ----------------------------------------------
SecurityAlert
| where TimeGenerated > ago(90d)
| where DisplayName has_any ("Suspicious process injection", "Monitored keystrokes", 
                             "potentially malicious code", "Defense evasion", 
                             "Multi-stage")
| extend Entities = parse_json(Entities)
| mv-expand Entity = Entities
| extend 
    EntityType = tostring(Entity.Type),
    HostName = tostring(Entity.HostName),
    FileName = tostring(Entity.Name),
    FilePath = tostring(Entity.Directory),
    ProcessCommandLine = tostring(Entity.CommandLine)
| where HostName startswith "vmiamqapps" 
   or FileName contains "VirtualTimeService64.exe"
   or FilePath contains "TimeShiftX"
| project 
    TimeGenerated,
    AlertName = DisplayName,
    AlertSeverity = AlertSeverity,
    HostName,
    FileName,
    FilePath,
    ProcessCommandLine,
    CompromisedEntity,
    Status,
    Entities = todynamic(Entities)
| order by TimeGenerated desc


// Query 2: Alert Frequency Analysis
// Purpose: شوف الـ pattern - هل بيحصل كل يوم؟ ساعات معينة؟
// ----------------------------------------------
SecurityAlert
| where TimeGenerated > ago(90d)
| where DisplayName has_any ("Suspicious process injection", "Monitored keystrokes")
| extend Entities = parse_json(Entities)
| mv-expand Entity = Entities
| extend HostName = tostring(Entity.HostName)
| where HostName startswith "vmiamqapps"
| summarize 
    AlertCount = count(),
    FirstSeen = min(TimeGenerated),
    LastSeen = max(TimeGenerated),
    Hosts = make_set(HostName),
    AlertTypes = make_set(DisplayName)
    by bin(TimeGenerated, 1d)
| order by TimeGenerated desc
| extend DaysSince = datetime_diff('day', now(), TimeGenerated)


// ============================================
// Phase 2: Process Behavior Analysis
// ============================================

// Query 3: VirtualTimeService64.exe - Full Process Details
// Purpose: شوف الـ process ده بيعمل إيه بالظبط
// ----------------------------------------------
DeviceProcessEvents
| where TimeGenerated > ago(90d)
| where FileName =~ "VirtualTimeService64.exe" 
   or ProcessCommandLine contains "VirtualTimeService64"
   or FolderPath contains "TimeShiftX"
| where DeviceName startswith "vmiamqapps"
| project 
    TimeGenerated,
    DeviceName,
    FileName,
    FolderPath,
    ProcessCommandLine,
    InitiatingProcessFileName,
    InitiatingProcessCommandLine,
    InitiatingProcessParentFileName,
    AccountName,
    ProcessId,
    SHA256,
    MD5
| order by TimeGenerated desc


// Query 4: Parent-Child Process Tree
// Purpose: مين اللي شغل الـ process ده؟ ومين اللي اتشغل بعده؟
// ----------------------------------------------
let targetProcess = "VirtualTimeService64.exe";
DeviceProcessEvents
| where TimeGenerated > ago(30d)
| where DeviceName startswith "vmiamqapps"
| where FileName =~ targetProcess or InitiatingProcessFileName =~ targetProcess
| extend 
    ProcessLevel = case(
        FileName =~ targetProcess, "Target",
        InitiatingProcessFileName =~ targetProcess, "Child",
        "Unknown"
    )
| project 
    TimeGenerated,
    DeviceName,
    ProcessLevel,
    ProcessName = FileName,
    ProcessCmdLine = ProcessCommandLine,
    ParentProcess = InitiatingProcessFileName,
    ParentCmdLine = InitiatingProcessCommandLine,
    GrandParent = InitiatingProcessParentFileName,
    AccountName,
    SHA256
| order by TimeGenerated desc, ProcessLevel


// Query 5: Network Connections
// Purpose: هل الـ process ده بيتصل بـ internet؟ فين؟
// ----------------------------------------------
DeviceNetworkEvents
| where TimeGenerated > ago(90d)
| where DeviceName startswith "vmiamqapps"
| where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
   or InitiatingProcessFolderPath contains "TimeShiftX"
| project 
    TimeGenerated,
    DeviceName,
    ActionType,
    RemoteIP,
    RemotePort,
    RemoteUrl,
    Protocol,
    InitiatingProcessFileName,
    InitiatingProcessCommandLine,
    LocalIP,
    LocalPort
| order by TimeGenerated desc


// ============================================
// Phase 3: Suspicious Behavior Analysis
// ============================================

// Query 6: Process Injection Events
// Purpose: شوف الـ injection ده حصل إزاي
// ----------------------------------------------
DeviceEvents
| where TimeGenerated > ago(90d)
| where DeviceName startswith "vmiamqapps"
| where ActionType in ("CreateRemoteThreadApiCall", "QueueUserApcRemoteApiCall", 
                       "SetThreadContextRemoteApiCall", "ProcessInjection")
| where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
   or FileName =~ "VirtualTimeService64.exe"
| project 
    TimeGenerated,
    DeviceName,
    ActionType,
    FileName,
    InitiatingProcessFileName,
    TargetProcessName = AdditionalFields.TargetProcessName,
    InjectionType = AdditionalFields.InjectionType,
    AdditionalFields = parse_json(AdditionalFields)
| order by TimeGenerated desc


// Query 7: Registry Modifications
// Purpose: هل عمل أي تعديل على الـ Registry؟
// ----------------------------------------------
DeviceRegistryEvents
| where TimeGenerated > ago(90d)
| where DeviceName startswith "vmiamqapps"
| where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
   or InitiatingProcessFolderPath contains "TimeShiftX"
| project 
    TimeGenerated,
    DeviceName,
    ActionType,
    RegistryKey,
    RegistryValueName,
    RegistryValueData,
    PreviousRegistryValueData,
    InitiatingProcessCommandLine
| order by TimeGenerated desc


// Query 8: File Operations
// Purpose: شوف الـ files اللي اتعملت/اتعدلت/اتمسحت
// ----------------------------------------------
DeviceFileEvents
| where TimeGenerated > ago(90d)
| where DeviceName startswith "vmiamqapps"
| where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
   or FileName =~ "VirtualTimeService64.exe"
   or FolderPath contains "TimeShiftX"
| project 
    TimeGenerated,
    DeviceName,
    ActionType,
    FileName,
    FolderPath,
    FileSize,
    SHA256,
    MD5,
    InitiatingProcessFileName,
    InitiatingProcessCommandLine
| order by TimeGenerated desc


// ============================================
// Phase 4: Keylogging Investigation
// ============================================

// Query 9: Keyboard Hook Detection
// Purpose: ده الأهم - هل فيه keylogger فعلاً؟
// ----------------------------------------------
DeviceEvents
| where TimeGenerated > ago(90d)
| where DeviceName startswith "vmiamqapps"
| where ActionType in ("SetWindowsHookEx", "GetAsyncKeyState", 
                       "GetKeyState", "RegisterHotKey")
| where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
   or FileName contains "VirtualTimeService64"
| project 
    TimeGenerated,
    DeviceName,
    ActionType,
    HookType = AdditionalFields.HookType,
    InitiatingProcessFileName,
    InitiatingProcessCommandLine,
    AdditionalFields = parse_json(AdditionalFields)
| order by TimeGenerated desc


// Query 10: Clipboard Access
// Purpose: هل بيقرأ الـ clipboard؟
// ----------------------------------------------
DeviceEvents
| where TimeGenerated > ago(90d)
| where DeviceName startswith "vmiamqapps"
| where ActionType in ("ClipboardData", "GetClipboardData")
| where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
| project 
    TimeGenerated,
    DeviceName,
    ActionType,
    InitiatingProcessFileName,
    AdditionalFields
| order by TimeGenerated desc


// ============================================
// Phase 5: User Context Analysis
// ============================================

// Query 11: User Activity on QA Machines
// Purpose: مين بيستخدم الـ machines دي؟ ليه؟
// ----------------------------------------------
DeviceLogonEvents
| where TimeGenerated > ago(90d)
| where DeviceName startswith "vmiamqapps"
| summarize 
    LogonCount = count(),
    FirstLogon = min(TimeGenerated),
    LastLogon = max(TimeGenerated),
    LogonTypes = make_set(LogonType),
    AccountsUsed = make_set(AccountName)
    by DeviceName
| order by LogonCount desc


// Query 12: Scheduled Tasks or Services
// Purpose: هل الـ process ده بيتشغل أوتوماتيك؟
// ----------------------------------------------
DeviceProcessEvents
| where TimeGenerated > ago(90d)
| where DeviceName startswith "vmiamqapps"
| where FileName in ("schtasks.exe", "sc.exe", "powershell.exe")
| where ProcessCommandLine contains "VirtualTimeService64"
   or ProcessCommandLine contains "TimeShiftX"
| project 
    TimeGenerated,
    DeviceName,
    FileName,
    ProcessCommandLine,
    InitiatingProcessFileName,
    AccountName
| order by TimeGenerated desc


// ============================================
// Phase 6: Comparison Analysis
// ============================================

// Query 13: Same Process on Non-QA Machines
// Purpose: هل الـ process ده موجود على machines تانية؟
// ----------------------------------------------
DeviceProcessEvents
| where TimeGenerated > ago(90d)
| where FileName =~ "VirtualTimeService64.exe"
| extend MachineType = case(
    DeviceName startswith "vmiamqapps", "QA",
    "Production/Other"
)
| summarize 
    Count = count(),
    Machines = make_set(DeviceName),
    FirstSeen = min(TimeGenerated),
    LastSeen = max(TimeGenerated)
    by MachineType
| order by MachineType


// Query 14: File Hash Reputation Check
// Purpose: شوف الـ hash ده معروف ولا لأ
// ----------------------------------------------
let targetHashes = 
    DeviceProcessEvents
    | where TimeGenerated > ago(7d)
    | where FileName =~ "VirtualTimeService64.exe"
    | where DeviceName startswith "vmiamqapps"
    | distinct SHA256, MD5;
DeviceFileCertificateInfo
| where SHA256 in (targetHashes)
| project 
    SHA256,
    Signer,
    SignerHash,
    IssuerName,
    IsTrusted,
    IsRootSignerMicrosoft
| union (
    targetHashes
    | project SHA256, MD5
)


// ============================================
// Phase 7: Timeline Reconstruction
// ============================================

// Query 15: Complete Timeline of Events
// Purpose: رتب كل الأحداث في timeline واحد
// ----------------------------------------------
let timeRange = ago(7d);
let targetDevice = "vmiamqapps"; // غير ده للـ specific machine
union 
    (DeviceProcessEvents
    | where TimeGenerated > timeRange
    | where DeviceName startswith targetDevice
    | where FileName =~ "VirtualTimeService64.exe" 
       or InitiatingProcessFileName =~ "VirtualTimeService64.exe"
    | project TimeGenerated, DeviceName, EventType = "Process", 
              Details = strcat("Process: ", FileName, " | CMD: ", ProcessCommandLine)),
    (DeviceNetworkEvents
    | where TimeGenerated > timeRange
    | where DeviceName startswith targetDevice
    | where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
    | project TimeGenerated, DeviceName, EventType = "Network", 
              Details = strcat("Connection to: ", RemoteIP, ":", RemotePort)),
    (DeviceRegistryEvents
    | where TimeGenerated > timeRange
    | where DeviceName startswith targetDevice
    | where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
    | project TimeGenerated, DeviceName, EventType = "Registry", 
              Details = strcat(ActionType, " | Key: ", RegistryKey)),
    (DeviceFileEvents
    | where TimeGenerated > timeRange
    | where DeviceName startswith targetDevice
    | where InitiatingProcessFileName =~ "VirtualTimeService64.exe"
    | project TimeGenerated, DeviceName, EventType = "File", 
              Details = strcat(ActionType, " | File: ", FileName)),
    (SecurityAlert
    | where TimeGenerated > timeRange
    | extend Entities = parse_json(Entities)
    | mv-expand Entity = Entities
    | extend HostName = tostring(Entity.HostName)
    | where HostName startswith targetDevice
    | project TimeGenerated, DeviceName = HostName, EventType = "Alert", 
              Details = strcat("Alert: ", DisplayName, " | Severity: ", AlertSeverity))
| order by TimeGenerated asc


// ============================================
// Phase 8: Correlation with Known Software
// ============================================

// Query 16: Check Software Inventory
// Purpose: هل TimeShiftX مثبت رسمي على الـ machines دي؟
// ----------------------------------------------
DeviceTvmSoftwareInventory
| where DeviceName startswith "vmiamqapps"
| where SoftwareName contains "TimeShift" 
   or SoftwareName contains "Virtual Time"
   or SoftwareVendor contains "Vorne"
| project 
    DeviceName,
    SoftwareName,
    SoftwareVendor,
    SoftwareVersion,
    EndOfSupportDate,
    OSPlatform
| order by DeviceName


// Query 17: Installed Applications
// Purpose: شوف كل الـ applications المثبتة
// ----------------------------------------------
DeviceRegistryEvents
| where TimeGenerated > ago(1d)
| where DeviceName startswith "vmiamqapps"
| where RegistryKey has "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
| where RegistryValueName in ("DisplayName", "Publisher", "InstallLocation")
| summarize arg_max(TimeGenerated, *) by DeviceName, RegistryKey, RegistryValueName
| project DeviceName, Application = RegistryValueData
| where Application contains "Time" or Application contains "Shift"
